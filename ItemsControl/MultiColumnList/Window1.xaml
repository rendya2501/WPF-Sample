<Window
    x:Class="MultiColumnList.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MultiColumnList"
    Title="Window1"
    Width="600"
    Height="600">
    <Grid>
        <Grid.Resources>
            <!--
                //
                // I create an XmlDataSource containing all of the vital
                // info about the Avalon bloggers including the BlogSite,
                // their name, an artificial "OnlineStatus" property and
                // the Url to their blog.  This is a good basic set of data
                // to show this example and will be the basis for each column.
                //
            -->
            <XmlDataProvider x:Key="BlogData" XPath="Blogs/Blog">
                <x:XData>
                    <Blogs xmlns="">
                        <Blog>
                            <BlogSite>simplegeek.com</BlogSite>
                            <Blogger OnlineStatus="Offline">Chris Anderson</Blogger>
                            <Url>http://simplegeek.com</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>fortes.com</BlogSite>
                            <Blogger OnlineStatus="Offline">Fil Fortes</Blogger>
                            <Url>http://fortes.com/work</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>Longhorn Blogs</BlogSite>
                            <Blogger OnlineStatus="Online">Rob Relyea</Blogger>
                            <Url>http://www.longhornblogs.com/rrelyea/</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>designerslove.net</BlogSite>
                            <Blogger OnlineStatus="Online">Nathan Dunlap</Blogger>
                            <Url>http://designerslove.net/</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>blogs.msdn.com</BlogSite>
                            <Blogger OnlineStatus="Online">Karsten Januszewski</Blogger>
                            <Url>http://blogs.msdn.com/karstenj</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>weblogs.asp.net</BlogSite>
                            <Blogger OnlineStatus="Online">Greg Schecter</Blogger>
                            <Url>http://weblogs.asp.net/greg_schechter</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>blogs.msdn.com</BlogSite>
                            <Blogger OnlineStatus="Online">Tim Sneath</Blogger>
                            <Url>http://blogs.msdn.com/tims/</Url>
                        </Blog>

                        <Blog>
                            <BlogSite>weblogs.asp.net</BlogSite>
                            <Blogger OnlineStatus="Offline">Marcelo Lopez-Ruiz</Blogger>
                            <Url>http://weblogs.asp.net/marcelolr/</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>blogs.msdn.com</BlogSite>
                            <Blogger OnlineStatus="Online">Kevin Moore</Blogger>
                            <Url>http://blogs.msdn.com/okoboji/default.aspx</Url>
                        </Blog>
                        <Blog>
                            <BlogSite>laurenlavoie.com</BlogSite>
                            <Blogger OnlineStatus="Offline">Lauren Lavoie</Blogger>
                            <Url>http://laurenlavoie.com/</Url>
                        </Blog>
                    </Blogs>
                </x:XData>
            </XmlDataProvider>


            <!--
                //
                // The BlogDataTemplate is the visual representation of each
                // Blog entry and associated data.  Notable here is that I use
                // Grid SizeSharing which allows layout sizes to be shared across
                // named groups.  In particular, I have created four columns.  Of the
                // four columns, three share sizes and the fourth takes the remaining space.
                // Note the SharedSizeGroup property on the ColumnDefinitions.  This
                // will be how the headers and items share their width.  Also, notice
                // that all of the bindings to particular fields in the Blogs data
                // are specified.
                //
            -->
            <DataTemplate x:Key="BlogDataTemplate">
                <Grid TextBlock.FontSize="20">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BloggerColumn" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="OnlineStatusColumn" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="BlogUrlColumn" />
                    </Grid.ColumnDefinitions>

                    <TextBlock
                        Grid.Column="0"
                        Margin="10,0,10,0"
                        Text="{Binding XPath=Blogger}" />
                    <TextBlock
                        Grid.Column="1"
                        Margin="10,0,10,0"
                        Text="{Binding XPath=BlogSite}" />
                    <TextBlock
                        Grid.Column="2"
                        Margin="10,0,10,0"
                        Text="{Binding XPath=Blogger/@OnlineStatus}" />

                    <TextBlock Grid.Column="3" Margin="10,0,10,0">
                        <Hyperlink NavigateUri="{Binding XPath=Url}">
                            <TextBlock Text="{Binding XPath=Url}" />
                        </Hyperlink>
                    </TextBlock>
                </Grid>
            </DataTemplate>

            <!--
                //
                // The following template is for the individual headers which are
                // actually Buttons.  These are Buttons in the event
                // that one would want to allow column sorting by clicking
                // on the headers.
                //
            -->
            <ControlTemplate x:Key="Header" TargetType="{x:Type Button}">
                <Border
                    Padding="10,3,10,4"
                    Background="LightGray"
                    TextBlock.FontSize="20"
                    TextBlock.Foreground="white">
                    <ContentPresenter />
                </Border>
            </ControlTemplate>

            <!--
                // The complete header control
            -->
            <Grid x:Key="ListHeader" Margin="5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="BloggerColumn" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="BlogSiteColumn" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="BloggerOnlineStatusColumn" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="BlogUrlColumn" />
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0" Template="{StaticResource Header}">Blogger</Button>
                <Button Grid.Column="1" Template="{StaticResource Header}">Blog Site</Button>
                <Button Grid.Column="2" Template="{StaticResource Header}">Status</Button>
                <Button Grid.Column="3" Template="{StaticResource Header}">Blog Url</Button>
            </Grid>


            <!--
                // The headered scroll viewer. Similar to the style of the ListView
                // ScrollViewer
            -->
            <Style x:Key="HeaderedScrollViewer" TargetType="{x:Type ScrollViewer}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <DockPanel Margin="{TemplateBinding Padding}">
                                    <ScrollViewer
                                        local:SetHorizontalOffset.Offset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset}"
                                        Content="{StaticResource ListHeader}"
                                        DockPanel.Dock="Top"
                                        HorizontalScrollBarVisibility="Hidden"
                                        VerticalScrollBarVisibility="Hidden" />

                                    <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local" />
                                </DockPanel>

                                <ScrollBar
                                    Name="PART_HorizontalScrollBar"
                                    Grid.Row="1"
                                    Maximum="{TemplateBinding ScrollableWidth}"
                                    Orientation="Horizontal"
                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                    Value="{TemplateBinding HorizontalOffset}" />

                                <ScrollBar
                                    Name="PART_VerticalScrollBar"
                                    Grid.Column="1"
                                    Maximum="{TemplateBinding ScrollableHeight}"
                                    ViewportSize="{TemplateBinding ViewportHeight}"
                                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                    Value="{TemplateBinding VerticalOffset}" />

                                <ResizeGrip
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Stretch"
                                    Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--
                // The ListBox style, incorporating the headered ScrollViewer style
            -->
            <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <ScrollViewer Grid.IsSharedSizeScope="True" Style="{StaticResource HeaderedScrollViewer}">
                                <StackPanel IsItemsHost="true" />
                            </ScrollViewer>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Grid.Resources>


        <!--
            //
            // Putting it all together now the data source and data template
            // are set on a plain ListBox.
            //
        -->
        <ListBox
            Width="400"
            Height="300"
            ItemTemplate="{StaticResource BlogDataTemplate}"
            ItemsSource="{Binding Source={StaticResource BlogData}}" />
    </Grid>
</Window>
